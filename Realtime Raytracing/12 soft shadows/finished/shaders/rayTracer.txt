#version 430

struct Sphere {
    vec3 center;
    float radius;
};

struct Camera {
    vec3 position;
    vec3 forwards;
    vec3 right;
    vec3 up;
};

struct Ray {
    vec3 origin;
    vec3 direction;
};

struct Plane {
    vec3 center;
    vec3 tangent;
    vec3 bitangent;
    vec3 normal;
    float uMin;
    float uMax;
    float vMin;
    float vMax;
};

struct RenderState {
    float t;
    vec3 color;
    vec3 emissive;
    vec3 position;
    vec3 normal;
    bool hit;
    float roughness;
};

struct Material {
    vec3 albedo;
    vec3 emissive;
    float gloss;
    vec3 normal;
    vec3 specular;
};

struct Light {
    vec3 position;
    vec3 color;
    float strength;
};

const float light_size = 0.05;
const vec3 offsets[8] = {
    vec3(-light_size, -light_size, -light_size),
    vec3( light_size, -light_size, -light_size),
    vec3( light_size,  light_size, -light_size),
    vec3(-light_size,  light_size, -light_size),
    vec3(-light_size, -light_size,  light_size),
    vec3( light_size, -light_size,  light_size),
    vec3( light_size,  light_size,  light_size),
    vec3(-light_size,  light_size,  light_size),
};

// input/output
layout(local_size_x = 1, local_size_y = 1) in;
layout(rgba32f, binding = 0) uniform image2D img_output;

//Scene data
uniform Camera viewer;
layout(rgba32f, binding = 1) readonly uniform image2D objects;
layout(rgba32f, binding = 2) readonly uniform image2D G0;
layout(rgba32f, binding = 3) readonly uniform image2D G1;
layout(rgba32f, binding = 4) readonly uniform image2D G2;
layout(rgba32f, binding = 5) readonly uniform image2D G3;
uniform float sphereCount;
uniform float planeCount;
uniform float lightCount;

Sphere unpackSphere(int index);

Plane unpackPlane(int index);

Light unpackLight(int index);

float distanceTo(Ray ray, Sphere sphere);

float distanceTo(Ray ray, Plane plane);

vec3 light_fragment(RenderState renderState);

RenderState unpackRenderState(ivec2 pixel_coords);

void main() {

    ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);
    ivec2 screen_size = imageSize(img_output);
    
    float horizontalCoefficient = float(pixel_coords.x);
    horizontalCoefficient = (horizontalCoefficient * 2 - screen_size.x) / screen_size.x;
    
    float verticalCoefficient = float(pixel_coords.y);
    verticalCoefficient = (verticalCoefficient * 2 - screen_size.y) / screen_size.x;

    RenderState renderState = unpackRenderState(pixel_coords);

    vec3 finalColor = renderState.color * light_fragment(renderState) + renderState.emissive;

    imageStore(img_output, pixel_coords, vec4(finalColor,1.0));
}

vec3 light_fragment(RenderState renderState) {

    //ambient
    vec3 color = vec3(0.2);

    for (int i = int(sphereCount + planeCount); i < planeCount + sphereCount + lightCount; i++) {

        Light light = unpackLight(i);

        for (int j = 0; j < 8; j++) {

            bool blocked = false;

            vec3 fragLight = light.position + offsets[j] - renderState.position;
            float distanceToLight = length(fragLight);
            fragLight = normalize(fragLight);
            vec3 fragViewer = normalize(viewer.position - renderState.position);
            vec3 halfway = normalize(fragViewer + fragLight);

            Ray ray;
            ray.origin = renderState.position;
            ray.direction = fragLight;
    
            for (int i = 0; i < sphereCount; i++) {

                float trialDist = distanceTo(ray, unpackSphere(i));

                if (trialDist < distanceToLight) {
                    blocked = true;
                }
            }

            for (int i = int(sphereCount); i < planeCount + sphereCount; i++) {
        
                float trialDist = distanceTo(ray, unpackPlane(i));
        
                if (trialDist < distanceToLight) {
                    blocked = true;
                }
            }

            if (!blocked) {
                //Calculate lighting
                color += 0.125 * light.color * max(0.0, dot(renderState.normal, fragLight)) * light.strength / (distanceToLight * distanceToLight);
                //specular
                color += 0.125 * light.color * pow(max(0.0, dot(renderState.normal, halfway)),64) * light.strength / (distanceToLight * distanceToLight);
            }
        }
    }
        
    return color;
}

float distanceTo(Ray ray, Sphere sphere) {

    vec3 co = ray.origin - sphere.center;
    float a = dot(ray.direction, ray.direction);
    float b = 2 * dot(ray.direction, co);
    float c = dot(co, co) - sphere.radius * sphere.radius;
    float discriminant = b * b - (4 * a * c);
    
    if (discriminant > 0.0) {

        float t = (-b - sqrt(discriminant)) / (2 * a);

        if (t < 0.0001) {
            return 9999;
        }

        return length(t * ray.direction);
    }

    return 99999;
}

float distanceTo(Ray ray, Plane plane) {
    
    float denom = dot(plane.normal, ray.direction); 
    
    if (denom < 0.000001) {

        float t = dot(plane.center - ray.origin, plane.normal) / denom; 

        if (t < 0.0001) {
            return 9999;
        }

        vec3 testPoint = ray.origin + t * ray.direction;
        vec3 testDirection = testPoint - plane.center;

        float u = dot(testDirection, plane.tangent);
        float v = dot(testDirection, plane.bitangent);

        if (u > plane.uMin && u < plane.uMax && v > plane.vMin && v < plane.vMax) {
            return length(t * ray.direction);
        }
    }
    return 9999;
}

Sphere unpackSphere(int index) {

    // sphere: (cx cy cz r) (- - - -) (- - - -) (- - - -)

    Sphere sphere;
    vec4 attributeChunk = imageLoad(objects, ivec2(0,index));
    sphere.center = attributeChunk.xyz;
    sphere.radius = attributeChunk.w;

    return sphere;
}

Plane unpackPlane(int index) {

    // plane: (cx cy cz tx) (ty tz bx by) (bz nx ny nz) (umin umax vmin vmax)

    Plane plane;
    vec4 attributeChunk = imageLoad(objects, ivec2(0,index));
    plane.center = attributeChunk.xyz;
    plane.tangent.x = attributeChunk.w;
    
    attributeChunk = imageLoad(objects, ivec2(1,index));
    plane.tangent.yz = attributeChunk.xy;
    plane.bitangent.xy = attributeChunk.zw;

    attributeChunk = imageLoad(objects, ivec2(2,index));
    plane.bitangent.z = attributeChunk.x;
    plane.normal = attributeChunk.yzw;

    attributeChunk = imageLoad(objects, ivec2(3,index));
    plane.uMin = attributeChunk.x;
    plane.uMax = attributeChunk.y;
    plane.vMin = attributeChunk.z;
    plane.vMax = attributeChunk.w;

    return plane;
}

Light unpackLight(int index) {

    // light: (x y z s) (r g b -) (- - - -) (- - - -)

    Light light;
    vec4 attributeChunk = imageLoad(objects, ivec2(0,index));
    light.position = attributeChunk.xyz;
    light.strength = attributeChunk.w;
    
    attributeChunk = imageLoad(objects, ivec2(1,index));
    light.color = attributeChunk.xyz;

    return light;
}

RenderState unpackRenderState(ivec2 pixel_coords) {
    // renderState: 
    //              G0: (rs.color rs.color rs.color rs.em) 
    //              G1: (rs.em rs.em rs.pos rs.pos) 
    //              G2: (rs.pos rs.norm rs.norm rs.norm) 
    //              G3: (rs.roughness - - -)

    RenderState renderState;
    renderState.t = 0.0;
    renderState.hit = true;

    vec4 attributeChunk = imageLoad(G0, pixel_coords);
    renderState.color = attributeChunk.xyz;
    renderState.emissive.x = attributeChunk.w;
    
    attributeChunk = imageLoad(G1, pixel_coords);
    renderState.emissive.yz = attributeChunk.xy;
    renderState.position.xy = attributeChunk.zw;

    attributeChunk = imageLoad(G2, pixel_coords);
    renderState.position.z = attributeChunk.x;
    renderState.normal = attributeChunk.yzw;
    renderState.normal = 2.0 * renderState.normal - vec3(1.0);

    attributeChunk = imageLoad(G3, pixel_coords);
    renderState.roughness = attributeChunk.x;

    return renderState;
}